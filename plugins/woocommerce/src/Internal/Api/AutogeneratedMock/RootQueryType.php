<?php

namespace Automattic\WooCommerce\Internal\Api\AutogeneratedMock;

use Automattic\WooCommerce\Internal\Api\GraphQL\GraphQLController;
use Automattic\WooCommerce\Internal\GraphQL\ApiException;
use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\ResolveInfo;
use GraphQL\Type\Definition\Type;

class RootQueryType extends ObjectType {

	private $container;

	public function __construct() {
		$this->container = wc_get_container();

		$config = array(
			'name'        => 'Query',
			'description' => __( 'The query root of WooCommerce GraphQL API.', 'woocommerce' ),
			'fields'      => fn(): array => $this->get_fields(),
			// 'resolveField' => fn ( $value, $args, $context, ResolveInfo $info ) => $this->resolve_field( $value, $args, $context, $info )
		);

		parent::__construct( $config );
	}

	private function get_fields() {
		return array_merge(
			[],
			GraphQLQueries\WebhooksQueries::get_queries()
		);
	}

	private function resolve_field( $value, $args, $context, ResolveInfo $info ) {
		$resolver = $this->get_fields()[ $info->fieldName ]['resolver'];
		return $resolver( $value, $args, $context, $info );
		try {
			return $resolver( $value, $args, $context, $info );
		} catch ( \Exception $ex ) {
			if ( ( $ex instanceof \InvalidArgumentException ) || ( method_exists( $ex, 'is_client_aware' ) && $ex->is_client_aware() ) ) {
				throw new ApiException( $ex->getMessage(), 'grapqhl_query_execution', $ex->getCode(), $ex );
			} else {
				throw $ex;
			}
		}
	}
}
